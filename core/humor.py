# core/humor.py
from __future__ import annotations

import os
import re
import random
from typing import Optional, List

# –°–ø–∏—Å–æ–∫ –º—è–≥–∫–∏—Ö –∑–∞–ø—Ä–µ—Ç–æ–≤ (—Ä–µ–≥—ç–∫—Å–ø—ã) ‚Äî —á—Ç–æ–±—ã —à—É—Ç–∫–∏ –Ω–µ —É—Ö–æ–¥–∏–ª–∏ –≤ —Ç–æ–∫—Å–∏–∫
SAFE_BAN: List[str] = [
    r"\b(–∏–¥–∏–æ—Ç|–¥—É—Ä–∞–∫|–¥–µ–±–∏–ª|–∫—Ä–µ—Ç–∏–Ω)\b",
    r"\b(—É—Ä–æ–¥|–∫–∞–ª–µ–∫–∞|—Å—É–º–∞—Å—à–µ–¥—à\w*)\b",
    r"\b(–∂–∏—Ä–Ω\w*|—Ç–æ—â\w*)\b",
    r"\b(–Ω–∏—â\w*|–±–µ–¥–Ω\w*)\b",
]
SAFE_RE = [re.compile(p, re.IGNORECASE) for p in SAFE_BAN]

# –ù–∞–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–æ–ª–æ–≤
REGIONAL_TEASE = {
    "ru-RU": {
        "friendly": [
            "–ù—É —Ç—ã, {name}, –∫–æ–Ω–µ—á–Ω–æ, —Ö–∏—Ç—Ä–µ—Ü: —Å–ø—Ä–æ—Å–∏–ª ‚Äî –∏ —Å–∞–º –∂–µ –≤—Å—ë –ø–æ–Ω—è–ª. –Ø —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—à—É—Å—å üòè",
            "–õ–∞–¥–Ω–æ-–ª–∞–¥–Ω–æ, {name}, —è —Å–¥–µ–ª–∞—é. –ê —Ç—ã –ø–æ–∫–∞ —Å–¥–µ–ª–∞–π –≤–∏–¥, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∞ —Ç–≤–æ—è –∏–¥–µ—è ü§ù",
            "–≠—Ç–æ –∑–≤—É—á–∏—Ç –ø—Ä–æ—Å—Ç–æ‚Ä¶ –ø–æ—á—Ç–∏ –∫–∞–∫ —Ç–≤–æ–π –±—É–¥–∏–ª—å–Ω–∏–∫ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –≥—Ä–æ–º–∫–æ, –Ω–æ –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è üòÖ",
        ],
        "spicy": [
            "–û—Ö, {name}, –ø–ª–∞–Ω —Ö–æ—Ä–æ—à. –ü–æ—á—Ç–∏ –∫–∞–∫ –¥–∏–µ—Ç–∞ –ø–æ—Å–ª–µ 23:00 ‚Äî –≤–µ—Ä–∏—Ç—Å—è, –Ω–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑–Ω–∞–µ—Ç –ø—Ä–∞–≤–¥—É ü§å",
            "–°–¥–µ–ª–∞—é. –ê —Ç—ã –ø–æ–∫–∞ –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è –¥–µ–ª–∞—Ç—å –≤–∏–¥, —á—Ç–æ —ç—Ç–æ –∑–∞–Ω—è–ª–æ '–¥–≤–µ –º–∏–Ω—É—Ç—ã' ‚è±Ô∏è",
            "–ó–∞–ø—Ä–æ—Å –æ–≥–æ–Ω—å. –ù—É –∏–ª–∏ –ø–æ–∂–∞—Ä ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ, —è —Å –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª–µ–º üî•",
        ],
    },
    "en-US": {
        "friendly": [
            "Alright {name}, smooth move. I‚Äôll do the heavy lifting, you take the credit üòâ",
            "Sounds easy‚Äîlike Monday alarms: loud, unavoidable, mildly painful üòÖ",
        ],
        "spicy": [
            "Bold plan, {name}. Almost as realistic as 'just one last tweak' at 2 AM üòè",
            "I‚Äôll build it. You practice saying ‚Äòtook five minutes‚Äô with a straight face ‚è±Ô∏è",
        ],
    },
}

def _clean(line: str) -> str:
    """–û—Ç—Å–µ–∫–∞—Ç—å —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—è—Ç –±–∞–Ω-—Å–ø–∏—Å–∫–∏."""
    for rx in SAFE_RE:
        if rx.search(line):
            return ""
    return line

class HumorEngine:
    """
    –õ—ë–≥–∫–∏–π –¥–≤–∏–∂–æ–∫ ¬´–ø–æ–¥–∫–æ–ª–æ–≤¬ª: region-aware, —Ä–µ–∂–∏–º—ã friendly/spicy,
    –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
    """
    def __init__(self, region: str = "ru-RU", mode: str = "friendly", name: Optional[str] = None):
        self.region = (region or "ru-RU")
        self.mode = (mode or "friendly")
        self.name = name or os.getenv("HUMOR_USER_NAME", "–¥—Ä—É–≥")

    def one_liner(self) -> str:
        bank = REGIONAL_TEASE.get(self.region, REGIONAL_TEASE["ru-RU"])
        pool = bank.get(self.mode, bank["friendly"])
        if not pool:
            pool = REGIONAL_TEASE["ru-RU"]["friendly"]
        # –°–ª—É—á–∞–π–Ω—ã–π, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä
        random.shuffle(pool)
        for template in pool:
            j = _clean(template.format(name=self.name))
            if j:
                return j
        return ""  # –µ—Å–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞—Ä–µ–∑–∞–ª —Ñ–∏–ª—å—Ç—Ä

    def decorate(self, answer: str) -> str:
        """–ü—Ä–∏–∫–ª–µ–∏—Ç—å —à—É—Ç–∫—É –∫ –æ—Ç–≤–µ—Ç—É (–ø–æ—Å–ª–µ —Å—É—Ç–∏)."""
        joke = self.one_liner()
        if not joke:
            return answer
        return f"{answer}\n\n‚Äî {joke}"

    if not joke: return answer
    # –ª—ë–≥–∫–∞—è –ø–æ–¥–∞—á–∞: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç –ø–æ –¥–µ–ª—É, –≤ –∫–æ–Ω—Ü–µ ‚Äî –ø–æ–¥–∫–æ–ª
    return f"{answer}\n\n‚Äî {joke}"

