from fastapi import FastAPI
from pydantic import BaseModel
from sentence_transformers import SentenceTransformer
import numpy as np
import uvicorn
import random  # <‚Äî –¥–ª—è —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã—Ö —Ñ—Ä–∞–∑

app = FastAPI(title="HACS Core (Local)", version="2.3")

# === Embeddings ===
model = SentenceTransformer('all-MiniLM-L6-v2')

# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
KNOWLEDGE_BASE = [
    {"text": "Open settings and configure preferences"},
    {"text": "Create a new note or document"},
    {"text": "Pay invoices and manage billing"},
    {"text": "Control smart home devices and lights"},
    {"text": "Schedule appointments and meetings"},
    {"text": "Search the web for information"},
    {"text": "Play music and control playback"},
    {"text": "Set reminders and timers"},
    {"text": "Send messages and emails"},
    {"text": "Translate languages in real-time"},
]

# –ü—Ä–µ–¥—Ä–∞—Å—á—ë—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –±–∞–∑—ã
knowledge_embeddings = np.array([model.encode(item["text"]) for item in KNOWLEDGE_BASE])

class IntentRequest(BaseModel):
    text: str

def cosine_similarity(query_embedding, knowledge_embeddings):
    """Cosine similarity –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    query_norm = query_embedding / (np.linalg.norm(query_embedding) + 1e-9)
    knowledge_norm = knowledge_embeddings / (np.linalg.norm(knowledge_embeddings, axis=1, keepdims=True) + 1e-9)
    similarities = np.dot(knowledge_norm, query_norm)
    return similarities

# === –•–∞—Ä–∏–∑–º–∞ / —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ ===
PERSONA_PHRASES = [
    "üî• –î–µ—Ä–∂–∏ —Å–≤–µ–∂–∞–∫!",
    "üòé –í–æ—Ç —Ç–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è!",
    "‚ú® –ü—Ä–æ–≤–µ—Ä–∏–ª ‚Äî –≤—Å—ë —Å—Ö–æ–¥–∏—Ç—Å—è!",
    "üí° –ü–æ–¥–∫–∏–Ω—É–ª –∏–¥–µ—é –Ω–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å–µ!",
    "üöÄ –ü–æ–µ—Ö–∞–ª–∏ –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É –∏ –ø–æ –¥–µ–ª—É.",
    "üëå –õ–∞–∫–æ–Ω–∏—á–Ω–æ –∏ —á—ë—Ç–∫–æ.",
]

def style_response(payload: dict, tone: str = "friendly") -> dict:
    """
    –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—É—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ¬´–∂–∏–≤–æ–π¬ª –æ—Ç–≤–µ—Ç.
    –ù–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è 'style' –∏ 'persona'.
    """
    styled = dict(payload)  # –∫–æ–ø–∏—è
    styled["style"] = random.choice(PERSONA_PHRASES)
    styled["persona"] = {
        "tone": tone,           # friendly | chill | confident ‚Äî –Ω–∞ –±—É–¥—É—â–µ–µ
        "brevity": "concise",   # –ª–∞–∫–æ–Ω–∏—á–Ω–æ
        "emoji": True,          # –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ –ø–æ–ª–∏—Ç–∏–∫–æ–π
    }
    return styled

@app.post("/act")
async def process_intent(request: IntentRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç –ª–æ–∫–∞–ª—å–Ω–æ:
    - —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
    - –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–º—ã—Å–ª–æ–≤ (top-3)
    - –ø—Ä–æ—Å—Ç–∞—è ¬´—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è¬ª –æ—Ü–µ–Ω–∫–∞
    - —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        # 1) –í–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = model.encode(request.text)

        # 2) –°—Ö–æ–¥—Å—Ç–≤–æ —Å –±–∞–∑–æ–π
        similarities = cosine_similarity(query_embedding, knowledge_embeddings)
        top_indices = np.argsort(similarities)[-3:][::-1]  # Top-3

        results = []
        for idx in top_indices:
            results.append({
                "text": KNOWLEDGE_BASE[idx]["text"],
                "similarity": float(similarities[idx]),
            })

        # 3) –†–µ–∑–æ–Ω–∞–Ω—Å
        best_match = float(similarities[top_indices[0]]) if len(top_indices) > 0 else 0.0
        status = "EXECUTE" if best_match > 0.6 else "REFINE"

        base_payload = {
            "status": status,
            "resonance": {
                "purity": best_match,
                "decay": float(1.0 - best_match),
                "gain": 0.9,
                "strength": float(best_match * 0.9),
            },
            "context": results,
            "local": True,
        }

        # 4) –•–∞—Ä–∏–∑–º–∞ ‚ú®
        return style_response(base_payload, tone="friendly")

    except Exception as e:
        error_payload = {
            "status": "ERROR",
            "error": str(e),
            "local": True,
        }
        return style_response(error_payload, tone="confident")

@app.get("/health")
async def health_check():
    """Health-check –¥–ª—è CI/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        "status": "OK",
        "service": "HACS Local Core",
        "version": "2.3",
        "model": "all-MiniLM-L6-v2",
    }

if __name__ == "__main__":
    print("üöÄ Starting HACS Local Core on http://127.0.0.1:8000")
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")
