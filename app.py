from contextlib import asynccontextmanager
import asyncio
import threading
import time
import os
import json
import hmac
from fastapi import FastAPI, HTTPException, Request, Header, BackgroundTasks
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import aioredis
import asyncpg
import nats
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from sentence_transformers import SentenceTransformer
from anyio.to_thread import run_sync
from ipaddress import ip_address, ip_network
from functools import partial

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
HMAC_SECRET = os.getenv("HMAC_SECRET", "change-me").encode()
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
PG_VECTOR_URL = os.getenv("PG_VECTOR_URL", "postgresql://postgres:postgres@localhost:5432/hacs")
NATS_URL = os.getenv("NATS_URL", "nats://localhost:4222")
POLICY_PATH = os.getenv("POLICY_PATH", "/app/hot/policies/policies.yaml")
VECTOR_DIM = 384

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç
os.makedirs(os.path.dirname(POLICY_PATH), exist_ok=True)
os.makedirs("/app/hot", exist_ok=True)

# ==================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ====================
class Intent(BaseModel):
    text: str
    context: dict = None

class ResonanceScore(BaseModel):
    purity: float
    decay: float
    gain: float
    strength: float

# ==================== –£–¢–ò–õ–ò–¢–´ ====================
def to_vector_literal(vec: list[float]) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ float –≤ —Å—Ç—Ä–æ–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞ –¥–ª—è PostgreSQL"""
    return "[" + ",".join(f"{x:.6f}" for x in vec) + "]"

def _to_int(x):
    try: return int(x) if x else 0
    except: return 0

def _to_float(x):
    try: return float(x) if x else 0.0
    except: return 0.0

def ip_allowed(client_ip: str, cidrs: list[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ IP –ø–æ allowlist CIDR"""
    if not cidrs: return True
    try:
        ip = ip_address(client_ip)
        return any(ip in ip_network(cidr) for cidr in cidrs)
    except:
        return False

def verify_hmac_signature(signature: str, body: bytes) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏"""
    if not signature: return False
    expected = hmac.new(HMAC_SECRET, body, 'sha256').hexdigest()
    return hmac.compare_digest(expected, signature)

# ==================== –ú–û–î–ï–õ–¨ –≠–ú–ë–ï–î–î–ò–ù–ì–û–í ====================
embedder = None

def load_embedder():
    global embedder
    if embedder is None:
        embedder = SentenceTransformer('all-MiniLM-L6-v2')
    return embedder

async def get_embedding(text: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ thread pool"""
    model = load_embedder()
    return await run_sync(partial(model.encode, text))

# ==================== –ü–û–õ–ò–¢–ò–ö–ò (Hot Reload) ====================
class PolicyLoader:
    def __init__(self, policy_path=POLICY_PATH):
        self.policy_path = policy_path
        self.policies = {}
        self.load_policies()
        
    def load_policies(self):
        try:
            if os.path.exists(self.policy_path):
                import yaml
                with open(self.policy_path, 'r') as f:
                    self.policies = yaml.safe_load(f)
                print("‚úÖ Policies reloaded")
        except Exception as e:
            print(f"‚ùå Failed to load policies: {e}")

policy_loader = PolicyLoader()

class PolicyHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if event.src_path.endswith('.yaml'):
            policy_loader.load_policies()

# ==================== HOT RELOAD ====================
class HotHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if event.src_path.endswith('.py'):
            print(f"üîÑ Hot reload triggered: {event.src_path}")

# ==================== LIFESPAN MANAGEMENT ====================
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    app.state.redis = await aioredis.from_url(REDIS_URL)
    app.state.pg = await asyncpg.connect(PG_VECTOR_URL)
    app.state.nats = await nats.connect(NATS_URL)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏—Ç–∏–∫
    policy_loader.load_policies()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    load_embedder()
    
    # Hot reload watcher
    def run_watcher():
        observer = Observer()
        observer.schedule(HotHandler(), path='/app/hot', recursive=True)
        observer.schedule(PolicyHandler(), path=os.path.dirname(POLICY_PATH), recursive=True)
        observer.start()
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
        observer.join()
    
    thread = threading.Thread(target=run_watcher, daemon=True)
    thread.start()
    print("‚úÖ Hot reload watcher started")
    
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    await app.state.redis.close()
    await app.state.pg.close()
    await app.state.nats.close()

# ==================== FASTAPI APP ====================
app = FastAPI(title="HACS Core", lifespan=lifespan)

# ==================== –≠–ù–î–ü–û–ò–ù–¢–´ ====================
@app.get("/")
async def root():
    return {"message": "HACS Resonance AI Engine", "version": "2.2"}

@app.get("/health")
async def health():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await app.state.redis.ping()
        await app.state.pg.execute("SELECT 1")
        await app.state.nats.flush(timeout=1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ NATS
        return {"status": "OK", "services": ["redis", "pg", "nats", "embedder"]}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Healthcheck failed: {str(e)}")

@app.post("/act")
async def act(intent: Intent, background_tasks: BackgroundTasks):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–∑–æ–Ω–∞–Ω—Å-–¥–≤–∏–∂–æ–∫
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = await get_embedding(intent.text)
        query_vec_literal = to_vector_literal(query_embedding)
        
        # –ò—â–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º DISTANCE)
        similar_items = await app.state.pg.fetch(
            "SELECT id, text, embedding <=> $1::vector AS distance FROM items ORDER BY distance ASC LIMIT 5",
            query_vec_literal
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        context_snippets = []
        best_distance = float(similar_items[0]['distance']) if similar_items else 99.0
        distance_threshold = policy_loader.policies.get('resonance', {}).get('distance_threshold', 0.25)
        
        if best_distance > distance_threshold:
            # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–æ—Ö–∏–µ - –∏–¥–µ–º –≤ –æ–±–ª–∞–∫–æ
            context_snippets = [{"source": "cloud", "snippet": "High-level context from cloud index..."}]
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            context_snippets = [
                {
                    "source": "local_pgvector", 
                    "snippet": item['text'], 
                    "distance": float(item['distance'])
                } for item in similar_items
            ]
        
        # –°–∫–æ—Ä–∏–Ω–≥ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞
        purity = 0.92
        decay = 0.08
        gain = 0.88
        
        # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞
        strength = purity * (1 - decay) * (0.5 + gain/2)
        resonance_score = ResonanceScore(
            purity=purity, 
            decay=decay, 
            gain=gain, 
            strength=strength
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å based on resonance strength
        status = "EXECUTE" if strength >= 0.7 else "REFINE"
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ NATS (–≤ —Ñ–æ–Ω–µ)
        event_data = {
            "intent": intent.text,
            "status": status,
            "resonance": resonance_score.dict(),
            "context_snippets": context_snippets,
            "timestamp": time.time()
        }
        
        background_tasks.add_task(
            app.state.nats.publish, 
            "resonance.complete", 
            json.dumps(event_data).encode()
        )
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_key = f"intent:{hash(intent.text)}"
        await app.state.redis.setex(
            cache_key,
            300,
            json.dumps(event_data)
        )
        
        return {
            "status": status,
            "resonance": resonance_score,
            "context": context_snippets,
            "cache_key": cache_key
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/context/{cache_key}")
async def get_cached_context(cache_key: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        cached_data = await app.state.redis.get(cache_key)
        if cached_data:
            return JSONResponse(content=json.loads(cached_data))
        else:
            raise HTTPException(status_code=404, detail="Context not found")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/webhook")
async def webhook(request: Request, x_hmac: str = Header(None)):
    """–í—Ö–æ–¥—è—â–∏–π webhook –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    body = await request.body()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ –ø–æ–ª–∏—Ç–∏–∫
    sec_config = policy_loader.policies.get("security", {})
    
    # Allowlist –ø—Ä–æ–≤–µ—Ä–∫–∞
    allowed_ips = sec_config.get("allowed_ips", [])
    if not ip_allowed(request.client.host, allowed_ips):
        raise HTTPException(status_code=403, detail="IP not allowed")
    
    # HMAC –ø—Ä–æ–≤–µ—Ä–∫–∞
    if sec_config.get("hmac_required", True):
        if not verify_hmac_signature(x_hmac, body):
            raise HTTPException(status_code=401, detail="Invalid signature")
    
    try:
        event = json.loads(body)
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ NATS
        await app.state.nats.publish("webhook.event", json.dumps(event).encode())
        
        return {"status": "accepted", "event_type": event.get('type')}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/metrics")
async def metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è Prometheus"""
    try:
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        hits = _to_int(await app.state.redis.get("metrics:cache_hits"))
        misses = _to_int(await app.state.redis.get("metrics:cache_misses"))
        total_requests = _to_int(await app.state.redis.get("metrics:total_requests"))
        total_time = _to_float(await app.state.redis.get("metrics:total_processing_time"))
        
        metrics_data = {
            "resonance_requests_total": total_requests,
            "cache_hits_total": hits,
            "cache_misses_total": misses,
            "cache_hit_rate": hits / (hits + misses) if (hits + misses) > 0 else 0,
            "average_processing_time_seconds": total_time / total_requests if total_requests > 0 else 0
        }
        return metrics_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
